// {
//   "name": "component-iconic-countdown-product-second.js",
//   "author": "Arham Web Works",
//   "description": "Copying in any form is strictly prohibited. Any instance of copying will be subject to legal action and accountability under the law."
// }

(() => {
  class Countdown extends HTMLElement {
    constructor() {
      super();
      this.mode = this.dataset.mode;
      this.targetDate = new Date(this.dataset.target);
      this.hideCounterOnComplete = this.dataset.hideCounterOnComplete || "yes";

      this.intervalId = null;
      this.isDestroyed = false;
      this.lastNumbers = {};

      this.clockConfigs = [];
      this.daysEl = null;
      this.hoursEl = null;
      this.minutesEl = null;
      this.secondsEl = null;
    }

    setupDOMElements() {
      if (this.mode === "flipcard") {
        this.clockConfigs = [
          {
            name: "day",
            flip: this.querySelector(".iconic-flip-clock.iconic-down.day"),
            front: this.querySelector(".day .front"),
            back: this.querySelector(".day .back"),
            getValue: (timeLeft) => Math.floor(timeLeft / (1000 * 60 * 60 * 24))
          },
          {
            name: "hour",
            flip: this.querySelector(".iconic-flip-clock.iconic-down.hour"),
            front: this.querySelector(".hour .front"),
            back: this.querySelector(".hour .back"),
            getValue: (timeLeft) => Math.floor((timeLeft / (1000 * 60 * 60)) % 24)
          },
          {
            name: "minute",
            flip: this.querySelector(".iconic-flip-clock.iconic-down.minute"),
            front: this.querySelector(".minute .front"),
            back: this.querySelector(".minute .back"),
            getValue: (timeLeft) => Math.floor((timeLeft / (1000 * 60)) % 60)
          },
          {
            name: "second",
            flip: this.querySelector(".iconic-flip-clock.iconic-down.second"),
            front: this.querySelector(".second .front"),
            back: this.querySelector(".second .back"),
            getValue: (timeLeft) => Math.floor((timeLeft / 1000) % 60)
          }
        ];
      } else {
        this.daysEl = this.querySelector(".js-days");
        this.hoursEl = this.querySelector(".js-hours");
        this.minutesEl = this.querySelector(".js-minutes");
        this.secondsEl = this.querySelector(".js-seconds");
      }
    }

    connectedCallback() {
      this.setupDOMElements();
      this.isDestroyed = false;
      this.start();
    }

    disconnectedCallback() {
      this.stop();
      this.isDestroyed = true;
    }

    getTimeLeft() {
      const now = new Date();
      const timeLeft = this.targetDate - now;
      return timeLeft > 0 ? timeLeft : 0;
    }

    updateSimple(timeLeft) {
      if (!this.daysEl) return;

      const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
      const hours = Math.floor((timeLeft / (1000 * 60 * 60)) % 24);
      const minutes = Math.floor((timeLeft / (1000 * 60)) % 60);
      const seconds = Math.floor((timeLeft / 1000) % 60);

      this.daysEl.textContent = String(days).padStart(2, "0");
      this.hoursEl.textContent = String(hours).padStart(2, "0");
      this.minutesEl.textContent = String(minutes).padStart(2, "0");
      this.secondsEl.textContent = String(seconds).padStart(2, "0");
    }

    flipDown(config, timeLeft) {
      if (!config.flip || !config.front || !config.back) {
        return;
      }

      const currentNumber = config.getValue(timeLeft);

      if (currentNumber !== this.lastNumbers[config.name]) {
        this.lastNumbers[config.name] = currentNumber;
        const formattedNumber = currentNumber.toString().padStart(2, "0");

        config.back.dataset.number = formattedNumber;
        config.flip.classList.add("go");

        setTimeout(() => {
          config.flip.classList.remove("go");
          config.front.dataset.number = formattedNumber;
        }, 600);
      }
    }

    handleComplete() {
      const countdownTime = this.querySelector(".iconic-countdown-timer");
      const countdownMessage = this.querySelector(".iconic-countdown-message");

      if (countdownTime) countdownTime.classList.add("iconic-d-none");

      if (this.hideCounterOnComplete === "no" && countdownMessage) {
        countdownMessage.classList.remove("iconic-d-none");
      }
    }

    tick() {
      const timeLeft = this.getTimeLeft();

      if (timeLeft <= 0) {
        this.stop();
        this.handleComplete();
        if (this.mode === "countdown") this.updateSimple(0);
        if (this.mode === "flipcard") this.clockConfigs.forEach((config) => this.flipDown(config, 0));
        return;
      }

      if (this.mode === "countdown") {
        this.updateSimple(timeLeft);
      } else if (this.mode === "flipcard") {
        this.clockConfigs.forEach((config) => this.flipDown(config, timeLeft));
      }
    }

    start() {
      if (this.intervalId || this.isDestroyed) return;
      this.tick();

      const now = new Date();
      const msUntilNextSecond = 1000 - now.getMilliseconds();

      setTimeout(() => {
        if (!this.isDestroyed) {
          this.tick();
          this.intervalId = setInterval(() => this.tick(), 1000);
        }
      }, msUntilNextSecond);
    }

    stop() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
    }
  }

  if (!customElements.get("iconic-countdown-product-timer")) {
    customElements.define("iconic-countdown-product-timer", Countdown);
  }
  document.addEventListener("shopify:section:load", (event) => {
    const section = event.target;
    section.querySelectorAll("iconic-countdown-product-timer").forEach((el) => {
      if (typeof el.start === "function" && !el.intervalId) {
        el.isDestroyed = false;
        el.start();
      }
    });
  });
})();